'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting solutions to problems
 * identified by the user during their passion exploration journey.
 *
 * The flow takes a list of problems as input and returns a list of suggested
 * solutions generated by an LLM.
 *
 * - suggestSolutionsForProblems - A function that handles the suggestion generation process.
 * - SuggestSolutionsForProblemsInput - The input type for the suggestSolutionsForProblems function.
 * - SuggestSolutionsForProblemsOutput - The return type for the suggestSolutionsForProblems function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestSolutionsForProblemsInputSchema = z.object({
  problems: z
    .array(z.string())
    .describe('A list of problems the user is facing with their passion.'),
});
export type SuggestSolutionsForProblemsInput = z.infer<
  typeof SuggestSolutionsForProblemsInputSchema
>;

const SuggestSolutionsForProblemsOutputSchema = z.object({
  solutions: z
    .array(z.string())
    .describe('A list of suggested solutions for the problems.'),
});
export type SuggestSolutionsForProblemsOutput = z.infer<
  typeof SuggestSolutionsForProblemsOutputSchema
>;

export async function suggestSolutionsForProblems(
  input: SuggestSolutionsForProblemsInput
): Promise<SuggestSolutionsForProblemsOutput> {
  return suggestSolutionsForProblemsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestSolutionsForProblemsPrompt',
  input: {schema: SuggestSolutionsForProblemsInputSchema},
  output: {schema: SuggestSolutionsForProblemsOutputSchema},
  prompt: `You are an AI assistant helping users overcome problems related to their passions.

  Given the following list of problems, suggest practical solutions for each.

  Problems:
  {{#each problems}}- {{{this}}}
  {{/each}}

  Solutions:
  `,
});

const suggestSolutionsForProblemsFlow = ai.defineFlow(
  {
    name: 'suggestSolutionsForProblemsFlow',
    inputSchema: SuggestSolutionsForProblemsInputSchema,
    outputSchema: SuggestSolutionsForProblemsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
